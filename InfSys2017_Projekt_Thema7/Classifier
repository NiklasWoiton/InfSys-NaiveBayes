#!/usr/bin/python
# -*- coding: utf-8 -*-

import csv
import nltk

#---Funktionen---


def transformedData():
    rawData = csv.reader(open("rawData.csv", "rb"))
    listData = [tuple(line)[4:] for line in rawData]
    return listData


def cleanedData(listData):
    newData = []
    for element in listData:
        if len(element) > len(descriptionData):
            newData.append(element[len(element)-len(descriptionData):])
            continue
        newData.append(element)
    return newData


def rating_features(tuple):
    features = {}
    for feature in range(0, len(tuple)):
        features[descriptionData[feature]] = tuple[feature]
    return features


def featuresets(i):
    return [(rating_features(n), rating) for (n, rating) in ratings]


def classifyTuple(tuple):
    print classifier.classify(rating_features(tuple))

#---Ausfuehrung---

listData = transformedData()
descriptionData = listData.pop(0)
listData = cleanedData(listData)

ratings = [(listData[i][1:], listData[i][0]) for i in range(0, len(listData))]

train_set, test_set = featuresets(1)[:len(ratings)/2], featuresets(1)[len(ratings)/2:]

classifier = nltk.NaiveBayesClassifier.train(train_set)
classifier.show_most_informative_features(10)

print "Accuracy: ", nltk.classify.accuracy(classifier, test_set)

classifyTuple(("-1", "0", "1", "2", "3", "4", "5"))#Beispiel Test-Tupel
