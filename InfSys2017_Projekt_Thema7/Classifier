#!/usr/bin/python
# -*- coding: utf-8 -*-

import csv
import nltk
import random


class NBClassifier(object):

    def __init__(self, csvDataSet):
        self.csvDataSet = csvDataSet
        self.listDataSet = []
        self.identifier = []
        self.classifier = None


    def transformedData(self):
        readCSV= csv.reader(open(self.csvDataSet, "rb"))
        self.listDataSet = [tuple(line) for line in readCSV]
        self.identifier = self.listDataSet.pop(0)
        random.shuffle(self.listDataSet)


    def trainClassifier(self):
        features_class_tuples = [(self.listDataSet[i], self.listDataSet[i][0]) for i in range(0, len(self.listDataSet))]
        featureSet = [(self.featureTransformation(n), rating) for (n, rating) in features_class_tuples]
        trainSet, testSet = featureSet[:len(features_class_tuples) / 2], featureSet[len(features_class_tuples) / 2:]
        self.classifier = nltk.NaiveBayesClassifier.train(trainSet)

        self.classifier.show_most_informative_features(10)
        print "Accuracy: ", nltk.classify.accuracy(self.classifier, testSet)

    def featureTransformation(self,featureTuple):
        features = {}
        for element in range(1, len(featureTuple)):
            features[self.identifier[element]] = featureTuple[element]
        return features


    def classifyTuple(self,tuple):
        print self.classifier.classify(self.featureTransformation(tuple))

    pass

nbClassifier = NBClassifier("workData.csv")
nbClassifier.transformedData()
nbClassifier.trainClassifier()